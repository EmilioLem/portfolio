% Initialize and clear the environment
clear; close all; clc;

% Create a hash table (using MATLAB's containers.Map)
hashTable = containers.Map('KeyType', 'double', 'ValueType', 'any'); 

% Define a list of names
nombres = { ... % List of names
    'Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Fiona', 'George', 'Hannah', ...
    'Irene', 'Jack', 'Kathy', 'Leo', 'Mia', 'Nina', 'Oscar', 'Paul', ...
    'Quinn', 'Rita', 'Sam', 'Tina', 'Uma', 'Vera', 'Will', 'Xena', ...
    'Yara', 'Zoe', 'Aiden', 'Brandon', 'Catherine', 'Diana', 'Ethan', ...
    'Frank', 'Grace', 'Henry', 'Isabella', 'James', 'Kelly', 'Liam', ...
    'Mason', 'Nora', 'Oliver', 'Penny', 'Quincy', 'Ruby', 'Sophie', ...
    'Thomas', 'Ulysses', 'Victoria', 'Wyatt', 'Xander', 'Yasmine', 'Zachary', ...
    'Amelia', 'Benjamin', 'Chloe', 'Daniel', 'Emily', 'Finn', 'Gaby', ...
    'Hugo', 'Isla', 'Jasper', 'Kayla', 'Luna', 'Max', 'Nadia', 'Owen', ...
    'Paige', 'Quinn', 'Riley', 'Sebastian', 'Tessa', 'Uriah', 'Violet', ...
    'Wesley', 'Xena', 'Yara', 'Zoe', 'Andrew', 'Bella', 'Cameron', ...
    'Derek', 'Evelyn', 'Felix', 'Gianna', 'Hunter', 'Ivory', 'Jordan', ...
    'Kieran', 'Lila', 'Maddox', 'Naomi', 'Ophelia', 'Peter', 'Quinn', ...
    'Reese', 'Sawyer', 'Talia', 'Uri', 'Vanessa', 'Whitney', 'Xander', ...
    'Yasmine', 'Zara', 'Ashley', 'Bradley', 'Cynthia', 'Dylan', ...
    'Ella', 'Freddie', 'Giselle', 'Henry', 'India', 'Jett', 'Kira', ...
    'Liam', 'Mila', 'Nina', 'Orlando', 'Piper', 'Quincy', 'Rowan', ...
    'Sienna', 'Theo', 'Ursula', 'Victor', 'Willa', 'Xena', 'Yosef', ...
    'Zeke', 'Ava', 'Beckham', 'Chad', 'Daphne', 'Elijah', 'Felicity', ...
    'Gabe', 'Holly', 'Isaac', 'Jasmine', 'Kyle', 'Lila', 'Maddie', ...
    'Noah', 'Olivia', 'Paxton', 'Quinn', 'Riley', 'Sebastian', 'Talia', ...
    'Umberto', 'Vera', 'Wyatt', 'Xena', 'Yara', 'Zoe', 'Alyssa', ...
    'Bryson', 'Cecilia', 'Dario', 'Eden', 'Felicia', 'Giovanni', ...
    'Harlow', 'Imogen', 'Jasper', 'Kendall', 'Lacey', 'Mara', 'Nico', ...
    'Odessa', 'Poppy', 'Quade', 'Rosie', 'Samantha', 'Tobias', ...
    'Uriah', 'Violet', 'Walter', 'Xander', 'Yvette', 'Zara', 'Adam', ...
    'Bria', 'Caleb', 'Delilah', 'Elena', 'Frances', 'Gideon', ...
    'Hattie', 'Ira', 'Juno', 'Kylie', 'Lorenzo', 'Mina', 'Nate', ...
    'Otto', 'Penny', 'Quinlan', 'Rocco', 'Shiloh', 'Tanner', 'Uriel', ...
    'Valentina', 'Wendy', 'Ximena', 'Yasmin', 'Zuri', 'Aria', ...
    'Beau', 'Carmen', 'Dante', 'Emery', 'Fiona', 'Garrett', 'Hester', ...
    'Isla', 'Julius', 'Kendall', 'Leo', 'Mila', 'Nash', 'Olive', ...
    'Pax', 'Quade', 'Reed', 'Sofia', 'Tobias', 'Uriah', 'Vaughn', ...
    'Wilma', 'Xerxes', 'Yvonne', 'Zelda', 'Alana', 'Bryce', 'Chase', ...
    'Destiny', 'Ezra', 'Freya', 'Gavin', 'Holland', 'Ian', 'Juliet', ...
    'Kai', 'Lana', 'Milo', 'Nessa', 'Omar', 'Piper', 'Quincy', ...
    'Rhea', 'Silas', 'Tate', 'Upton', 'Victor', 'Willa', 'Xia', ...
};

% Define the table size
tableSize = 500;

% Define a simple hash function
function hashValue = simpleHash(key, tableSize)
    % Compute the sum of ASCII values of characters in the key
    asciiSum = sum(double(key)); 
    % Use modulus operator to find the hash index
    hashValue = mod(asciiSum, tableSize);
end

% Populate the hash table
for i = 1:numel(nombres)
    name = nombres{i}; % Get the current name
    hashIndex = simpleHash(name, tableSize); % Compute the hash index
    
    % Collision resolution: linear probing
    while isKey(hashTable, hashIndex)
        % If index is occupied, move to the next index (wrap around using modulus)
        hashIndex = mod(hashIndex + 1, tableSize);
    end
    
    % Assign the name to the available hash index
    hashTable(hashIndex) = name;
end

% Display the names in their insertion order
disp('The names in the insertion order are:');
disp(nombres);
